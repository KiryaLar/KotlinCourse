package ru.larkin.service;

import lombok.RequiredArgsConstructor;
import ru.larkin.model.*;
import ru.larkin.repository.UserRepository;

import java.util.NoSuchElementException;
import java.util.UUID;

@RequiredArgsConstructor
public class UserService {

    private final UserRepository userRepository;


    public void registerUser() {
        System.out.println("–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ");

        String userId = UUID.randomUUID().toString().substring(0, 6);

        String name = InputUtilService.getInput("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ",
                input -> !input.isBlank(),
                "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");

        String email = InputUtilService.getInput("–í–≤–µ–¥–∏—Ç–µ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ",
                input -> !input.isBlank(),
                "Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω");

        int year = Integer.parseInt(InputUtilService.getInput("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è: ",
                input -> {
                    try {
                        int y = Integer.parseInt(input);
                        return y >= 1000 && y <= 2025;
                    } catch (NumberFormatException e) {
                        return false;
                    }
                }, "–ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è –∫–Ω–∏–≥–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 1925-2018"));


        UserType userType = getInputUserType();

        User newUser = createTypeUser(userId, name, email, year, userType);



        userRepository.addUser(newUser);
        System.out.printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å %s —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.%n", userId);
    }

    public void getAllUsers() {
    }

    public void findUsersByCriteria() {
    }

    public void removeUser() {
    }

    private UserType getInputUserType() {
        String type = InputUtilService.getInput("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (STUDENT, FACULTY, GUEST): ",
                input -> {
                    return input.equalsIgnoreCase("STUDENT") ||
                           input.equalsIgnoreCase("FACULTY") ||
                           input.equalsIgnoreCase("GUEST");
                },
                "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: STUDENT, FACULTY, GUEST");
        return UserType.valueOf(type.toUpperCase());
    }

    private User createTypeUser(String userId, String name, String email, int year, UserType userType) {
        switch (userType) {
            case STUDENT -> {
                return createStudent(userId, name, email, year);
            }
            case FACULTY -> {
                return createFaculty(userId, name, email, year);
            }
            case GUEST -> {
                return createGuest(userId, name, email, year);
            }
            default -> throw new NoSuchElementException("–¢–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç".formatted(userType));
        }
    }

    private Guest createGuest(String userId, String name, String email, int year) {
        return Guest.builder()
                .userId(userId)
                .name(name)
                .email(email)
                .birthYear(year)
                .userType(UserType.GUEST)
                .build();
    }

    private Faculty createFaculty(String userId, String name, String email, int year) {
        return Faculty.builder()
                .userId(userId)
                .name(name)
                .email(email)
                .birthYear(year)
                .userType(UserType.FACULTY)
                .build();
    }

    private Student createStudent(String userId, String name, String email, int year) {
        return Student.builder()
                .userId(userId)
                .name(name)
                .email(email)
                .birthYear(year)
                .userType(UserType.STUDENT)
                .build();
    }

//    private static final int MIN_BIRTH_YEAR = 1900;
//    private static final int MAX_BIRTH_YEAR = Year.now().getValue();
//
//    private final UserRepository userRepository;
//
//    public UserRegistrationService(UserRepository userRepository) {
//        this.userRepository = userRepository;
//    }
//
//    public void registerUser() {
//        System.out.println("–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ");
//
//        String userId = UUID.randomUUID().toString().substring(0, 6);
//
//        String name  = prompt("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ",
//                s -> !s.isBlank(),
//                "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
//
//        String email = prompt("–í–≤–µ–¥–∏—Ç–µ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ",
//                s -> !s.isBlank() && isEmail(s),
//                "–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email (–Ω–∞–ø—Ä–∏–º–µ—Ä, user@example.com)");
//
//        int year     = promptInt("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è: ",
//                y -> y >= MIN_BIRTH_YEAR && y <= MAX_BIRTH_YEAR,
//                "–ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ %d‚Äì%d".formatted(MIN_BIRTH_YEAR, MAX_BIRTH_YEAR));
//
//        UserType userType = promptEnum(
//                "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (STUDENT, FACULTY, GUEST): ",
//                UserType.class,
//                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø. –í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: STUDENT, FACULTY, GUEST");
//
//        UserData data = new UserData(userId, name, email, year, userType);
//
//        User newUser = FACTORY.getOrDefault(userType, __ -> {
//            throw new NoSuchElementException("–¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω".formatted(userType));
//        }).apply(data);
//
//        userRepository.addUser(newUser);
//        System.out.printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id %s —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.%n", userId);
//    }
//
//    // ---- –§–∞–±—Ä–∏–∫–∞ –ø–æ —Ç–∏–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ----
//
//    private static final Map<UserType, Function<UserData, User>> FACTORY = Map.of(
//        UserType.STUDENT, d -> Student.builder()
//                .userId(d.userId()).name(d.name()).email(d.email())
//                .birthYear(d.birthYear()).userType(UserType.STUDENT).build(),
//        UserType.FACULTY, d -> Faculty.builder()
//                .userId(d.userId()).name(d.name()).email(d.email())
//                .birthYear(d.birthYear()).userType(UserType.FACULTY).build(),
//        UserType.GUEST,   d -> Guest.builder()
//                .userId(d.userId()).name(d.name()).email(d.email())
//                .birthYear(d.birthYear()).userType(UserType.GUEST).build()
//    );
//
//    // ---- –•–µ–ª–ø–µ—Ä—ã –≤–≤–æ–¥–∞ ----
//
//    private static String prompt(String label,
//                                 java.util.function.Predicate<String> ok,
//                                 String errMsg) {
//        return InputUtilService.getInput(label, ok, errMsg);
//    }
//
//    private static int promptInt(String label,
//                                 java.util.function.IntPredicate ok,
//                                 String errMsg) {
//        return Integer.parseInt(InputUtilService.getInput(label, s -> {
//            try {
//                int v = Integer.parseInt(s);
//                return ok.test(v);
//            } catch (NumberFormatException e) {
//                return false;
//            }
//        }, errMsg));
//    }
//
//    private static <E extends Enum<E>> E promptEnum(String label,
//                                                    Class<E> enumType,
//                                                    String errMsg) {
//        String raw = InputUtilService.getInput(label, s -> {
//            try { Enum.valueOf(enumType, s.trim().toUpperCase()); return true; }
//            catch (IllegalArgumentException e) { return false; }
//        }, errMsg);
//        return Enum.valueOf(enumType, raw.trim().toUpperCase());
//    }
//
//    private static boolean isEmail(String s) {
//        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞. –ï—Å–ª–∏ –Ω—É–∂–µ–Ω —Å—Ç—Ä–æ–≥–∏–π —Ñ–æ—Ä–º–∞—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π Apache Commons Validator.
//        return s.contains("@") && s.indexOf('@') > 0 && s.indexOf('@') < s.length() - 1;
//    }
//
//    // –ø–µ—Ä–µ–Ω–æ—Å–∏–º ¬´–æ–±—â–∏–π –Ω–∞–±–æ—Ä –ø–æ–ª–µ–π¬ª –≤ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
//    private record UserData(String userId, String name, String email, int birthYear, UserType type) {}
//}
//–ß—Ç–æ —É–ª—É—á—à–∏–ª–∏
//‚ùå –£–±—Ä–∞–ª–∏ —Ç—Ä–∏ –ø–æ—á—Ç–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –º–µ—Ç–æ–¥–∞ createStudent/Faculty/Guest.
//
//‚úÖ –ï–¥–∏–Ω—ã–π —Ñ–∞–±—Ä–∏—á–Ω—ã–π Map ‚Äî –ª–µ–≥–∫–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π UserType.
//
//‚úÖ –ï–¥–∏–Ω—ã–µ, –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ö–µ–ª–ø–µ—Ä—ã –¥–ª—è –≤–≤–æ–¥–∞ —á–∏—Å–µ–ª –∏ enum.
//
//‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –≥–æ–¥–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—á–∏—Ç—ã–≤–∞—é—Ç —Ç–µ–∫—É—â–∏–π –≥–æ–¥).
//
//‚úÖ –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –æ—à–∏–±–æ–∫.
//
//üß© –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å Lombok @SuperBuilder –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏ User ‚Üí Student/Faculty/Guest, —ç—Ç–æ—Ç –∫–æ–¥ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
//
//–ú–∏–∫—Ä–æ-—Å–æ–≤–µ—Ç: –≤–º–µ—Å—Ç–æ UUID.substring(0,6) –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π, –Ω–æ —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, NanoID) ‚Äî –º–µ–Ω—å—à–µ –∫–æ–ª–ª–∏–∑–∏–π –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏.
}
